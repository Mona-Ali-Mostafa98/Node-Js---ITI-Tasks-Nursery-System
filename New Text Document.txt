1- create uploads folder // image string -> save images un uploads and image path save in db 
2- 









/*const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, '../uploads/');
    },
    filename: function (req, file, cb) {
	const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
        const originalname = file.originalname.replace(path.extname(file.originalname), ''); // Remove the extension from the original filename
        cb(null, originalname + '-' + uniqueSuffix + path.extname(file.originalname)); // Append the unique suffix and the original extension
	//     cb(null, file.fieldname + '-' + uniqueSuffix); هتحمل الصوره من غير الاكستنشن


        cb(null, file.originalname); // Use the original filename for the uploaded file الاسم الحقيقي للصوره الي انا محملاها
    }
});*/
With this update, the filename function will preserve the original filename provided by the client while appending a unique suffix generated using the current timestamp and a random number. The extension of the original filename is also preserved


/****************************you can make in model***************************/
const fs = require('fs');
const multer = require('multer');

// // Set up multer for handling file uploads
// const storage = multer.diskStorage({
//     destination: function (req, file, cb) {
//         cb(null, '../uploads'); // Save uploads to 'uploads' directory
//     },
//     filename: function (req, file, cb) {
//         cb(null, Date.now() + '-' + file.originalname); // Use current timestamp as filename
//     },
// });
// const upload = multer({ storage: storage });
//
// // Pre-save hook to handle image upload
// schema.pre('save', upload.single('image'), function (next) {
//     // Check if there is an uploaded image
//     if (this.isModified('image') && this.image) {
//         // If so, move the image to a permanent location and update the image path in the document
//         const tempPath = this.image;
//         const targetPath = 'uploads/' + Date.now() + '-' + this.image.name;
//
//         fs.rename(tempPath, targetPath, (err) => {
//             if (err) return next(err);
//             this.image = targetPath; // Update image path in the document
//             next();
//         });
//     } else {
//         next();
//     }
// });


/*********************************************can show error message using *****************************/

//*
// (req, res, next) => {
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ message: 'Validation failed', errors: errors.array() });
//     }
//     next(); // Proceed to the next middleware if validation passes
//   }
// */



const newTeacher = new Teacher({
    fullname: 'admin of nursery system',
    password: '12345678',
    email: 'admin@gmail.com',
    image: 'uploads\\user.jpg',
    role: 'admin'
});

newTeacher.save()
    .then(savedTeacher => {
        console.log('New teacher added:', savedTeacher);
    })
    .catch(error => {
        console.error('Error adding new teacher:', error);
    });
